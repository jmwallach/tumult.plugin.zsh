#!/usr/bin/env bash
#
# Make a RAM disk
#
# Copyright 2025, Joe Block <jpb@unixorn.net>

set -o pipefail
if [[ -n "$DEBUG" ]]; then
  # shellcheck disable=SC2086
  if [[ "$(echo $DEBUG | tr '[:upper:]' '[:lower:]')" == "verbose" ]]; then
    set -x
  fi
fi

function echo-stderr() {
  printf '%s
' "$1" >&2  ## Send message to stderr. Exclude >&2 if you don't want it that way.
}

function debug() {
  if [[ -n "$DEBUG" ]]; then
      echo-stderr "$@"
  fi
}

function fail() {
  echo-stderr "$1"
  exit "${2-1}"  ## Return a code specified by $2 or 1 by default.
}

function has() {
  # Check if a command is in $PATH
  which "$@" > /dev/null 2>&1
}

function get-settings() {
  RAMDISK_NAME=${RAMDISK_NAME:-'RAM DISK'}
}

function only-run-on() {
  # shellcheck disable=SC2086
  if [[ "$(uname -s | tr '[:upper:]' '[:lower:]')" != "$(echo $1 | tr '[:upper:]' '[:lower:]')" ]]; then
    fail "This script only runs on $1, this machine is running $(uname -s)"
  else
    debug "OS ($(uname -s)) is valid..."
  fi
}

function check-dependency() {
  if ! (builtin command -V "$1" >/dev/null 2>&1); then
    fail "missing dependency: can't find $1 in your PATH"
  fi
}

function check-dependencies() {
  debug "Checking dependencies..."
  # shellcheck disable=SC2041
  # Placeholders for whatever programs you really need
  for dep in "$@"
  do
    if ! has "$dep"; then
      fail "Can't find $dep in your $PATH"
    else
      debug "- Found $dep"
    fi
  done
}

function my-name() {
  basename "$0"
}

function usage() {
  echo "Usage: $(my-name) --ram-disk-size SIZE_IN_MEGS --ram-disk-name NAME"
  echo
  echo "WHen you eject the ram disk, there is no way to get your data back, so be careful"
}

only-run-on Darwin
check-dependencies diskutil
get-settings

# parse arguments

while :
do
  if [[ $# == 0 ]]; then
    break
  fi
  case "$1" in
    --help | -h)
      usage
      exit 0
      ;;
    --ram-disk-name | --ramdisk-name)
      shift
      RAMDISK_NAME="$1"
      shift
      ;;
    --ram-disk-size | --ramdisk-size)
      shift
      RAMDISK_SIZE="$1"
      shift
      ;;
    -- )
      shift;
      break
      ;;
    *)
      echo-stderr "Unexpected option: $1"
      usage
      fail "Invalid CLI argument: '$1'"
      ;;
  esac
done

if [[ -z "$RAMDISK_SIZE" ]]; then
  echo-stderr "You must specify a RAM disk size with --ram-disk-size"
  usage
  exit 13
fi

# shellcheck disable=SC2003
DISKSIZE=$(expr "$RAMDISK_SIZE" '*' 2048)
# shellcheck disable=SC2046
debug "RAMDISK_SIZE: $RAMDISK_SIZE"
debug "Disk size: $DISKSIZE"
debug "Disk name: $RAMDISK_NAME"
# shellcheck disable=SC2046
diskutil erasevolume HFS+ "${RAMDISK_NAME}"  $(hdiutil attach -nomount "ram://$DISKSIZE")
